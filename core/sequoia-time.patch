--- a/Cargo.toml
+++ b/Cargo.toml
@@ -365,6 +365,14 @@
     "crypto-nettle",
 ]
 
+[dependencies.chrono]
+version = "0.4.10"
+features = [
+    "std",
+    "clock",
+]
+default-features = false
+
 [target."cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))".dependencies.chrono]
 version = "0.4.10"
 features = [
--- a/src/fmt.rs
+++ b/src/fmt.rs
@@ -287,47 +287,11 @@
 pub(crate) fn time(t: &std::time::SystemTime) -> String {
     // Actually use a chrono dependency for WASM since there's no strftime
     // (except for WASI).
-    #[cfg(all(target_arch = "wasm32", target_os = "unknown"))] {
+
         chrono::DateTime::<chrono::Utc>::from(t.clone())
             .format("%Y-%m-%dT%H:%M:%SZ")
             .to_string()
-    }
-    #[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))] {
-        extern "C" {
-            fn strftime(
-                s: *mut libc::c_char,
-                max: libc::size_t,
-                format: *const libc::c_char,
-                tm: *const libc::tm,
-            ) -> usize;
-        }
-
-        let t = match t.duration_since(std::time::UNIX_EPOCH) {
-            Ok(t) => t.as_secs() as libc::time_t,
-            Err(_) => return format!("{:?}", t),
-        };
-        let fmt = b"%Y-%m-%dT%H:%M:%SZ\x00";
-        assert_eq!(b"2020-03-26T10:08:10Z\x00".len(), 21);
-        let mut s = [0u8; 21];
-
-        unsafe {
-            let mut tm: libc::tm = std::mem::zeroed();
-
-            #[cfg(unix)]
-            libc::gmtime_r(&t, &mut tm);
-            #[cfg(windows)]
-            libc::gmtime_s(&mut tm, &t);
-
-            strftime(s.as_mut_ptr() as *mut libc::c_char,
-                     s.len(),
-                     fmt.as_ptr() as *const libc::c_char,
-                     &tm);
-        }
-
-        std::ffi::CStr::from_bytes_with_nul(&s)
-            .expect("strftime nul terminates string")
-            .to_string_lossy().into()
-    }
+    
 }
 
 #[cfg(test)]
